{"version":3,"sources":["WebChat.js","MinimizableWebChat.js","App.js","serviceWorker.js","index.js"],"names":["WebChat","className","onFetchToken","store","token","directLine","useMemo","createDirectLine","styleSet","createStyleSet","backgroundColor","useEffect","MinimizableWebChat","createStore","dispatch","next","action","type","payload","name","value","language","window","navigator","activity","from","role","setNewMessage","useState","loaded","setLoaded","minimized","setMinimized","newMessage","side","setSide","setToken","handleFetchToken","useCallback","a","async","fetch","method","headers","Headers","res","json","handleMaximizeButtonClick","handleMinimizeButtonClick","handleSwitchButtonClick","onClick","classNames","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a6ea521.chunk.js","sourcesContent":["import React, { useEffect, useMemo } from 'react';\r\nimport ReactWebChat, { createDirectLine, createStyleSet } from 'botframework-webchat';\r\n\r\nimport './WebChat.css';\r\n\r\nconst WebChat = ({ className, onFetchToken, store, token }) => {\r\n  const directLine = useMemo(() => createDirectLine({ token }), [token]);\r\n\r\n  const styleSet = useMemo(\r\n    () =>\r\n      createStyleSet({\r\n        backgroundColor: 'Transparent'\r\n      }),\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    onFetchToken();\r\n  }, [onFetchToken]);\r\n\r\n  return token ? (\r\n    <ReactWebChat className={`${className || ''} web-chat`} directLine={directLine} store={store} styleSet={styleSet} />\r\n  ) : (\r\n    <div className={`${className || ''} connect-spinner`}>\r\n      <div className=\"content\">\r\n        <div className=\"icon\">\r\n          <span className=\"ms-Icon ms-Icon--Robot\" />\r\n        </div>\r\n        <p>Please wait while we are connecting.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WebChat;\r\n","import classNames from 'classnames';\r\nimport React, { useCallback, useMemo, useState } from 'react';\r\nimport { createStore, createStyleSet } from 'botframework-webchat';\r\n\r\nimport WebChat from './WebChat';\r\n\r\nimport './fabric-icons-inline.css';\r\nimport './MinimizableWebChat.css';\r\n\r\nconst MinimizableWebChat = () => {\r\n  const store = useMemo(\r\n    () =>\r\n      createStore({}, ({ dispatch }) => next => action => {\r\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\r\n          dispatch({\r\n            type: 'WEB_CHAT/SEND_EVENT',\r\n            payload: {\r\n              name: 'webchat/join',\r\n              value: {\r\n                language: window.navigator.language\r\n              }\r\n            }\r\n          });\r\n        } else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\r\n          if (action.payload.activity.from.role === 'bot') {\r\n            setNewMessage(true);\r\n          }\r\n        }\r\n\r\n        return next(action);\r\n      }),\r\n    []\r\n  );\r\n\r\n  const styleSet = useMemo(\r\n    () =>\r\n      createStyleSet({\r\n        backgroundColor: 'Transparent'\r\n      }),\r\n    []\r\n  );\r\n\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [minimized, setMinimized] = useState(true);\r\n  const [newMessage, setNewMessage] = useState(false);\r\n  const [side, setSide] = useState('right');\r\n  const [token, setToken] = useState();\r\n\r\n  const handleFetchToken = useCallback(async () => {\r\n    if (!token) {\r\n        const res = await fetch('https://directline.botframework.com/v3/directline/tokens/generate', {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                'Authorization': 'Bearer ET1eTs5Lt3E.6IRGoDMbspOsDeheMSxrqrGtOcxLCQ-xJisMS0VSmxw'\r\n            })\r\n        });\r\n      const { token } = await res.json();\r\n\r\n      setToken(token);\r\n    }\r\n  }, [setToken, token]);\r\n\r\n  const handleMaximizeButtonClick = useCallback(async () => {\r\n    setLoaded(true);\r\n    setMinimized(false);\r\n    setNewMessage(false);\r\n  }, [setMinimized, setNewMessage]);\r\n\r\n  const handleMinimizeButtonClick = useCallback(() => {\r\n    setMinimized(true);\r\n    setNewMessage(false);\r\n  }, [setMinimized, setNewMessage]);\r\n\r\n  const handleSwitchButtonClick = useCallback(() => {\r\n    setSide(side === 'left' ? 'right' : 'left');\r\n  }, [setSide, side]);\r\n\r\n  // TODO: [P2] Currently, we cannot unmount Web Chat from DOM when it is minimized.\r\n  //       Today, if we unmount it, Web Chat will call disconnect on DirectLineJS object.\r\n  //       When minimized, we still want to maintain that connection while the UI is gone.\r\n  //       This is related to https://github.com/microsoft/BotFramework-WebChat/issues/2750.\r\n\r\n  return (\r\n    <div className=\"minimizable-web-chat\">\r\n      {minimized && (\r\n        <button className=\"maximize\" onClick={handleMaximizeButtonClick}>\r\n          <span className={token ? 'ms-Icon ms-Icon--MessageFill' : 'ms-Icon ms-Icon--Message'} />\r\n          {newMessage && <span className=\"ms-Icon ms-Icon--CircleShapeSolid red-dot\" />}\r\n        </button>\r\n      )}\r\n      {loaded && (\r\n        <div className={classNames(side === 'left' ? 'chat-box left' : 'chat-box right', minimized ? 'hide' : '')}>\r\n          <header>\r\n            <div className=\"filler\" />\r\n            <button className=\"switch\" onClick={handleSwitchButtonClick}>\r\n              <span className=\"ms-Icon ms-Icon--Switch\" />\r\n            </button>\r\n            <button className=\"minimize\" onClick={handleMinimizeButtonClick}>\r\n              <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\r\n            </button>\r\n          </header>\r\n          <WebChat\r\n            className=\"react-web-chat\"\r\n            onFetchToken={handleFetchToken}\r\n            store={store}\r\n            styleSet={styleSet}\r\n            token={token}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MinimizableWebChat;\r\n","import React from 'react';\r\n\r\nimport MinimizableWebChat from './MinimizableWebChat';\r\nimport './App.css';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <MinimizableWebChat />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}